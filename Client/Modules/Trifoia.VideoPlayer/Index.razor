@namespace Trifoia.VideoPlayer
@using Blazored.Video
@using Blazored.Video.Support
@inherits ModuleBase
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject SiteState SiteState

@if (_source != null)
{
    <BlazoredVideo EventFired="OnEvent"
    VideoEventOptions="options"
    class="w-100"
    style="max-width:800px;"
    controls="controls">
    <source 
        src="@_source"
        type="@_type" />
</BlazoredVideo>
}
    
@code {
    private string _source ;
    private string _type ;
    private const string DefaultSource = "https://www.sample-videos.com/video123/mp4/720/big_buck_bunny_720p_5mb.mp4";
    private const string DefaultType = "video/mp4";
    Dictionary<VideoEvents, VideoStateOptions> options = new ();

    protected override async Task OnInitializedAsync()
    {
  
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            _source = SettingService.GetSetting(settings, "source", DefaultSource);
            _type = SettingService.GetSetting(settings, "type", DefaultType);
           
            var option = new VideoStateOptions() { All = true };
            options[VideoEvents.Abort] = option;
            options[VideoEvents.CanPlay] = option;
            options[VideoEvents.CanPlayThrough] = option;
            options[VideoEvents.DurationChange] = option;
            options[VideoEvents.Emptied] = option;
            options[VideoEvents.Ended] = option;
            options[VideoEvents.Error] = option;
            options[VideoEvents.LoadedData] = option;
            options[VideoEvents.LoadedMetadata] = option;
            options[VideoEvents.LoadStart] = option;
            options[VideoEvents.Pause] = option;
            options[VideoEvents.Play] = option;
            options[VideoEvents.Playing] = option;
            options[VideoEvents.Progress] = option;
            options[VideoEvents.RateChange] = option;
            options[VideoEvents.Seeked] = option;
            options[VideoEvents.Seeking] = option;
            options[VideoEvents.Stalled] = option;
            options[VideoEvents.Suspend] = option;
            options[VideoEvents.TimeUpdate] = option;
            options[VideoEvents.VolumeChange] = option;
            options[VideoEvents.Waiting] = option;

        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }


    void OnEvent(VideoEventData videoData)
    {
        SiteState.Properties.VideoState = videoData.State;
    }
}